name: Cypress and jest Test

on:
  pull_request:
  workflow_dispatch:
  schedule:
  - cron:  '0 4 * * 1,2,3,4,5'

jobs:
  ci:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'Do not run tests') == false 
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_DEV_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.AZURE_KEYVAULT_DEV_NAME }}
          secrets: 'MockUserNonProdWeb, AzureAdClientIdScope'  # comma separated list of secret keys that need to be fetched from the Key Vault 
        id: keyVaultSecrets

      - name: build
        working-directory: GetAccessToken
        run: dotnet build --configuration Release

      - name: Put access token in key vault
        env:
          buildConfiguration: 'Release'
          mockuserAppId: ${{ secrets.MOCK_USER_DEV_CLIENT_SECRET }}
          mockappuserClientSecret: ${{ steps.keyVaultSecrets.outputs.MockUserNonProdWeb }}
          mockUserAppScopes: ${{ steps.keyVaultSecrets.outputs.AzureAdClientIdScope}}
          keyVaultUserClientId: ${{ secrets.AZURE_KEYVAULT_DEV_NAME }}
          keyVaultName: ${{ secrets.AZURE_KEYVAULT_DEV_NAME }}
          cypressAccesstokenSecretname: 'cypressAccesstokenDev'
          NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget
          NPM_PACKAGES: $(Pipeline.Workspace)/.npm
          CYPRESS_BINARY: $(Pipeline.Workspace)/.cypressbinary
          clientId: ${{ secrets.DEV_AZURE_CREDENTIALS_CLIENT_ID }}
          clientSecret:  ${{ secrets.DEV_AZURE_CREDENTIALS_CLIENT_SECRET }}
          tenantId: ${{ secrets.AZURE_TENANT_ID }}
          azureSubscriptionId: ${{ secrets.DEV_AZURE_SUBSCRIPTION_ID }}
        run: |
          dotnet GetAccessToken/bin/Release/netcoreapp3.1/GetAccessToken.dll --tenant-id $tenantId --app-id $mockuserAppId --mock-user-client-secret $mockappuserClientSecret --authority $mockUserAppScopes --key-vault-name $keyVaultName --key-vault-secret-name $cypressAccesstokenSecretname --key-vault-user-client-secret $clientSecret --key-vault-user-client-id $clientId

      - uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.AZURE_KEYVAULT_DEV_NAME }}
          secrets: 'cypressAccesstokenDev'  # comma separated list of secret keys that need to be fetched from the Key Vault
        id: token


      - uses: Amadevus/pwsh-script@v2
        id: my-script2
        env:
          COVERAGE_PERCENT_NOW: ${{steps.coveragePercentage.outputs.COVERAGE_PERCENT}}
          COVERAGE_PERCENT_BEFORE: ${{ secrets.COVERAGE_PERCENTAGE }}
        with:
          script: ./.github/scripts/coverageChange.ps1 ${{ env.COVERAGE_PERCENT_BEFORE}} 5

      - uses: gliech/create-github-secret-action@v1
        with:
          name: coverage_percentage
          value: 65.54
          pa_token: ${{ secrets.PA_TOKEN }}
      # - uses: sergeysova/gist-read-action@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   id: example-gist
      #   with:
      #     gist_id: 66a47f0b2d120954c140e9d2b61c3d7b
      #     file_name: test.json

      - name: show content
        run: echo "Hello ${{ steps.example-gist.outputs.content }}"

      - run: npm install

      

      # This will retry entire test run. Will only retry specific steps for now
      # - name: Run quick running cypress tests
      #   uses: nick-invision/retry@v2
      #   with:
      #     timeout_minutes: 4
      #     max_attempts: 2
      #     command: npx cypress run --config-file "cypress_chromium.dev.json" --spec "cypress/integration/quickRunningTests/**/*" --env cyAccessToken=${{ steps.token.outputs.cypressAccesstokenDev }}

      - name: Run quick running cypress tests
        env:
          token: ${{ steps.token.outputs.cypressAccesstokenDev }}
        run: npx cypress run --config-file "cypress_chromium.dev.json" --spec "cypress/integration/quickRunningTests/**/*" --env cyAccessToken=$token

      - name: Run long running cypress tests  
        env:
          token: ${{ steps.token.outputs.cypressAccesstokenDev }}
        run: npx cypress run --config-file "cypress_chromium.dev.json" --spec "cypress/integration/longRunningTests/**/*" --env cyAccessToken=$token
        if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'Run all tests') }}
        
      # - name: Run all tests in Chromium browser
      #   env:
      #     token: ${{ steps.token.outputs.cypressAccesstokenDev }}
      #   run: npx cypress run --browser chromium --config-file "cypress_chromium.dev.json" --env cyAccessToken=$token
      #   if: ${{ github.event_name != 'pull_request' }}
        
      # - name: Run all tests in Firefox browser  
      #   env:
      #     token: ${{ steps.token.outputs.cypressAccesstokenDev }}
      #   run: npx cypress run --browser firefox --config-file "cypress.dev.json" --env cyAccessToken=$token
      #   if: ${{ github.event_name != 'pull_request' }}

      - name: Save screenshots if failure
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      - name: Save videos if failure
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

      - run: npx nyc report --reporter lcov --reporter text --report-dir coverage

      - uses: actions/upload-artifact@v2
        with:
          name: Cypress-Coverage-report
          path: coverage/lcov-report/

      - run: npx nyc report --reporter=text-summary > cypress_test_summary.txt
        if: ${{ github.event_name == 'pull_request' }}

      - run: sed '2d' cypress_test_summary.txt > cypress_test_summary2.txt
        if: ${{ github.event_name == 'pull_request' }}

      - run: sed '1 a Cypress Test Result' cypress_test_summary2.txt > cypress_test_summary3.txt
        if: ${{ github.event_name == 'pull_request' }}

      - name: comment PR
        uses: machine-learning-apps/pr-comment@master
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          path: cypress_test_summary3.txt

      - run: npx nyc report --reporter json  --report-dir coverage

      - name: Test coverage
        uses: ArtiomTr/jest-coverage-report-action@v1.3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          test_script: npx react-scripts test src  --silent --ci --coverage --coverageReporters="text" --coverageReporters="text-summary"

      - name: Create jest coverage report
        run: npm test -- --coverage --watchAll=false --coverageDirectory=jest-coverage
        continue-on-error: true
      - uses: actions/upload-artifact@v2
        with:
          name: Jest-Coverage-report
          path: jest-coverage/lcov-report/

      - name: copy file
        uses: canastro/copy-file-action@master
        with:
          source: "./jest-coverage/coverage-final.json"
          target: "./coverage/coverage-final-jest.json"

      - run: npx nyc report --reporter html --reporter text -t coverage --report-dir totalCoverage

      - uses: actions/upload-artifact@v2
        with:
          name: Total coverage report
          path: totalCoverage

      - run: npx nyc report --reporter json-summary --reporter text -t coverage --report-dir coverage

      # - name: Set code coverage commit status ðŸ“«
      #   run: npx -p check-code-coverage set-gh-status
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Ensure coverage has not dropped ðŸ“ˆ
      #   run: npx -p check-code-coverage set-gh-status --check-against-readme
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     GH_SHA: ${{ github.event.after }}

      - run: npx nyc report --reporter text-summary --report-dir coverage > totalCoverage.txt

      - run: sed '6!d' totalCoverage.txt > totalCoverage2.txt

      - run: awk '{print $3}' totalCoverage2.txt

      - run : echo "::set-output name=COVERAGE_PERCENT::$( awk '{print $3}' totalCoverage2.txt)"
        id: coveragePercentage

      - name: Create Awesome Badge
        uses: schneegans/dynamic-badges-action@v1.1.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 66a47f0b2d120954c140e9d2b61c3d7b
          filename: test.json
          label: Coverage
          message: ${{steps.coveragePercentage.outputs.COVERAGE_PERCENT}}
          color: orangee

      # - run: dir
      #   env:
      #     COVERAGE_PERCENT: ${{ secrets.COVERAGE_PERCENTAGE }}
      #   if: ${{ env.COVERAGE_PERCENT > steps.coveragePercentage.outputs.COVERAGE_PERCENT }}
      # - run: dir
      #   env:
      #     COVERAGE_PERCENT: ${{ secrets.COVERAGE_PERCENTAGE }}
      #   if: ${{ env.COVERAGE_PERCENT == steps.coveragePercentage.outputs.COVERAGE_PERCENT }}
      # - run: dir
      #   env:
      #     COVERAGE_PERCENT: ${{ secrets.COVERAGE_PERCENTAGE }}
      #   if: ${{ env.COVERAGE_PERCENT < steps.coveragePercentage.outputs.COVERAGE_PERCENT }}

      - uses: Amadevus/pwsh-script@v2
        id: my-script
        env:
          COVERAGE_PERCENT_NOW: ${{steps.coveragePercentage.outputs.COVERAGE_PERCENT}}
          COVERAGE_PERCENT_BEFORE: ${{ secrets.COVERAGE_PERCENTAGE }}
        with:
          script: ./.github/scripts/coverageChange.ps1 $COVERAGE_PERCENT_NOW $COVERAGE_PERCENT_BEFORE

      - name: comment coverage PR
        uses: unsplash/comment-on-pr@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: ${{ steps.my-script.outputs.result }}
          check_for_duplicate_msg: true 
