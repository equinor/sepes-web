name: Cypress Test

on:
  pull_request:
  workflow_dispatch:
  schedule:
    # * is a special character in YAML so you have to quote this string
  - cron:  '0 4 * * 1,2,3,4,5'

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_DEV_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.AZURE_KEYVAULT_DEV_NAME }}
          secrets: 'MockUserNonProdWeb, AzureAdClientIdScope'  # comma separated list of secret keys that need to be fetched from the Key Vault 
        id: keyVaultSecrets

      - name: build
        working-directory: GetAccessToken
        run: dotnet build --configuration Release

      - name: Put access token in key vault
        env:
          buildConfiguration: 'Release'
          mockuserAppId: ${{ secrets.MOCK_USER_DEV_CLIENT_SECRET }}
          mockappuserClientSecret: ${{ steps.keyVaultSecrets.outputs.MockUserNonProdWeb }}
          mockUserAppScopes: ${{ steps.keyVaultSecrets.outputs.AzureAdClientIdScope}}
          keyVaultUserClientId: ${{ secrets.AZURE_KEYVAULT_DEV_NAME }}
          keyVaultName: ${{ secrets.AZURE_KEYVAULT_DEV_NAME }}
          cypressAccesstokenSecretname: 'cypressAccesstokenDev'
          NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget
          NPM_PACKAGES: $(Pipeline.Workspace)/.npm
          CYPRESS_BINARY: $(Pipeline.Workspace)/.cypressbinary
          clientId: ${{ secrets.DEV_AZURE_CREDENTIALS_CLIENT_ID }}
          clientSecret:  ${{ secrets.DEV_AZURE_CREDENTIALS_CLIENT_SECRET }}
          tenantId: ${{ secrets.AZURE_TENANT_ID }}
          azureSubscriptionId: ${{ secrets.DEV_AZURE_SUBSCRIPTION_ID }}
        run: |
          dotnet GetAccessToken/bin/Release/netcoreapp3.1/GetAccessToken.dll --tenant-id $tenantId --app-id $mockuserAppId --mock-user-client-secret $mockappuserClientSecret --authority $mockUserAppScopes --key-vault-name $keyVaultName --key-vault-secret-name $cypressAccesstokenSecretname --key-vault-user-client-secret $clientSecret --key-vault-user-client-id $clientId

      - uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.AZURE_KEYVAULT_DEV_NAME }}
          secrets: 'cypressAccesstokenDev'  # comma separated list of secret keys that need to be fetched from the Key Vault 
        id: token

      # Install Node dependencies --spec "cypress/integration/test/test.spec.js"
    
      #- run: npm ci

      - run: npm install --save-dev mocha mochawesome mochawesome-merge mochawesome-report-generator

      - name: Run quick running cypress tests  
        env:
          token: ${{ steps.token.outputs.cypressAccesstokenDev }}
        run: npx cypress run --config-file "cypress.dev.json" --spec "cypress/integration/quickRunningTests/**/*" --env cyAccessToken=$token

      - name: Run long running cypress tests  
        env:
          token: ${{ steps.token.outputs.cypressAccesstokenDev }}
        run: npx cypress run --config-file "cypress.dev.json" --spec "cypress/integration/longRunningTests/**/*" --env cyAccessToken=$token
        if: ${{ github.event_name == 'schedule' }}
        
      - name: Run all tests in Edge browser  
        env:
          token: ${{ steps.token.outputs.cypressAccesstokenDev }}
        run: npx cypress run --browser edge --config-file "cypress.dev.json" --env cyAccessToken=$token
        if: ${{ github.event_name == 'schedule' }}
        
      - name: Run all tests in Firefox browser  
        env:
          token: ${{ steps.token.outputs.cypressAccesstokenDev }}
        run: npx cypress run --browser firefox --config-file "cypress.dev.json" --env cyAccessToken=$token
        if: ${{ github.event_name == 'schedule' }}

      - run: npx nyc report --reporter lcov --reporter text --report-dir coverage
      - run: dir coverage
      - uses: actions/upload-artifact@v2
        with:
          name: Coverage-report
          path: coverage/lcov-report/

      - id: Create cypress result summary
        run: npx nyc report --reporter=text-summary

      - name: Post result in comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: 1
          body: ${{ steps.get-comment-body.outputs.body }}

      # - name: Prepare reports
      #   if: always()
      #   run: |
      #     npm i -g mochawesome-merge
      #     npm i -g mochawesome-report-generator
      #     mochawesome-merge test/cypress/reports/mocha/*.json > ./test/cypress/reports/mocha/index.json
      #     marge --charts=true --showPassed=false -o ./test/cypress/reports/mocha/ ./test/cypress/reports/mocha/index.json
      # - name: Cypress report
      #   uses: dmitry/cypress-report-action@v1
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     pathname: cypress/reports/mocha/index.json
      #   if: always()
# npx nyc report --reporter lcov --reporter text --report-dir coverage