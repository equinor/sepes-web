name: Cypress Test

on:
  pull_request:
  workflow_dispatch:
  schedule:
  - cron:  '0 4 * * 1,2,3,4,5'

jobs:
  ci:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'Do not run tests') == false 
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_DEV_CREDENTIALS }}

      - name: Retrieve token
        id: id-token
        run: |
          TOKEN="$(az account get-access-token --query 'accessToken' -o tsv)"
          echo "::set-output name=TOKEN::$TOKEN"


      - uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.AZURE_KEYVAULT_DEV_NAME }}
          secrets: 'MockUserNonProdWeb, AzureAdClientIdScope'  # comma separated list of secret keys that need to be fetched from the Key Vault 
        id: keyVaultSecrets

      - name: build
        working-directory: GetAccessToken
        run: dotnet build --configuration Release

      - name: Put access token in key vault
        env:
          buildConfiguration: 'Release'
          mockuserAppId: ${{ secrets.MOCK_USER_DEV_CLIENT_SECRET }}
          mockappuserClientSecret: ${{ steps.keyVaultSecrets.outputs.MockUserNonProdWeb }}
          mockUserAppScopes: ${{ steps.keyVaultSecrets.outputs.AzureAdClientIdScope}}
          keyVaultUserClientId: ${{ secrets.AZURE_KEYVAULT_DEV_NAME }}
          keyVaultName: ${{ secrets.AZURE_KEYVAULT_DEV_NAME }}
          cypressAccesstokenSecretname: 'cypressAccesstokenDev'
          NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget
          NPM_PACKAGES: $(Pipeline.Workspace)/.npm
          CYPRESS_BINARY: $(Pipeline.Workspace)/.cypressbinary
          clientId: ${{ secrets.DEV_AZURE_CREDENTIALS_CLIENT_ID }}
          clientSecret:  ${{ secrets.DEV_AZURE_CREDENTIALS_CLIENT_SECRET }}
          tenantId: ${{ secrets.AZURE_TENANT_ID }}
          azureSubscriptionId: ${{ secrets.DEV_AZURE_SUBSCRIPTION_ID }}
        run: |
          dotnet GetAccessToken/bin/Release/netcoreapp3.1/GetAccessToken.dll --tenant-id $tenantId --app-id $mockuserAppId --mock-user-client-secret $mockappuserClientSecret --authority $mockUserAppScopes --key-vault-name $keyVaultName --key-vault-secret-name $cypressAccesstokenSecretname --key-vault-user-client-secret $clientSecret --key-vault-user-client-id $clientId

      - uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.AZURE_KEYVAULT_DEV_NAME }}
          secrets: 'cypressAccesstokenDev'  # comma separated list of secret keys that need to be fetched from the Key Vault
        id: token

      # Install Node dependencies --spec "cypress/integration/test/test.spec.js"

      - run: npm install --save-dev mocha mochawesome mochawesome-merge mochawesome-report-generator

      - run: sudo sh -c "echo fs.inotify.max_user_watches=524288 >> /etc/sysctl.conf"

      - run: sudo sysctl -p
      # This will retry entire test run. Will only retry specific steps for now
      # - name: Run quick running cypress tests
      #   uses: nick-invision/retry@v2
      #   with:
      #     timeout_minutes: 4
      #     max_attempts: 2
      #     command: npx cypress run --config-file "cypress_chromium.dev.json" --spec "cypress/integration/quickRunningTests/**/*" --env cyAccessToken=${{ steps.token.outputs.cypressAccesstokenDev }}

      # https://github.com/cypress-io/github-action
      - name: Run cypress
        uses: cypress-io/github-action@v2
        env: 
            CYPRESS_cyAccessToken: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Im5PbzNaRHJPRFhFSzFqS1doWHNsSFJfS1hFZyJ9.eyJhdWQiOiJlOTBjYmI2MS04OTZlLTRlYzctYWEzNy0yMzUxMTcwMGUxZWQiLCJpc3MiOiJodHRwczovL2xvZ2luLm1pY3Jvc29mdG9ubGluZS5jb20vM2FhNGEyMzUtYjZlMi00OGQ1LTkxOTUtN2ZjZjA1YjQ1OWIwL3YyLjAiLCJpYXQiOjE2Mjg0OTgzOTYsIm5iZiI6MTYyODQ5ODM5NiwiZXhwIjoxNjI4NTAyMjk2LCJhaW8iOiJBVFFBeS84VEFBQUFHR1ZTRVR5TDN0c2pCUzZzblozTEV5WlZhd21UN3hBaFh0dmFLckp6b3dlbExnNHEyNTAxWEpoN3RJUHRBb0hYIiwiYXpwIjoiZTkwY2JiNjEtODk2ZS00ZWM3LWFhMzctMjM1MTE3MDBlMWVkIiwiYXpwYWNyIjoiMCIsImVtYWlsIjoiSEFOT0xAZXF1aW5vci5jb20iLCJmYW1pbHlfbmFtZSI6Ik9sc2VuIiwiZ2l2ZW5fbmFtZSI6IkhhbnMgS3Jpc3RpYW4gVmlrIiwibmFtZSI6IkhhbnMgS3Jpc3RpYW4gVmlrIE9sc2VuIiwib2lkIjoiNzYyMTA2ZWUtOGJkYS00MmI0LThkOGEtNTM3YjA3YmNhYjAxIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiSEFOT0xAZXF1aW5vci5jb20iLCJyaCI6IjAuQVFJQU5hS2tPdUsyMVVpUmxYX1BCYlJac0dHN0RPbHVpY2RPcWpjalVSY0E0ZTBDQUk4LiIsInJvbGVzIjpbIlNlcGVzLVNwb25zb3IiLCJTZXBlcy1BZG1pbiIsIlNlcGVzLUVtcGxveWVlIl0sInNjcCI6Ikdyb3VwLlJlYWQuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIFVzZXIuUmVhZCBVc2VyLlJlYWQuQWxsIFVzZXIuSW1wZXJzb25hdGlvbiIsInN1YiI6IjlnRlVWSkZSN1pZMFpscUNkeVpNYWdKVmN5dVljXzFSVGtoeEFVQjVLMUkiLCJ0aWQiOiIzYWE0YTIzNS1iNmUyLTQ4ZDUtOTE5NS03ZmNmMDViNDU5YjAiLCJ1cG4iOiJIQU5PTEBlcXVpbm9yLmNvbSIsInV0aSI6IkFIVkh1N1hoTEVpRWNjVHVXN3BTQVEiLCJ2ZXIiOiIyLjAifQ.hcEhOZ5yOGK3lKNB5vU5VxHrfXEC_fs5AobHy1iN8bdV1ISNODuP4mjZe9xNxPGSAWh-c1GzygxcKaYZMFdher-cwVwYNEVwvnxApXhWgg57v2T1YoxDZG4_TONKrCfs-ljlEZY5Gy4Z1LuBKnDV7SVeJI50jdQJ5XPtfKRg8TXEUhfhEyN-CZt_Wtct7Z7p1nNm7XYR1pGimiejtrzAw8K4vkNW_TNsnGvMWT1zTXsbD3KnIyyQ4irxtSj9n9OLFpNqxO4ongzNhOh-iLUd4s-YRQ8FofoyloO-EtSG6SL2J7hiKJSiDE4DrzfYuQ1Po9oAP9FqefO8q4w6Y5_epg"
            CYPRESS_API_URL: https://backend-sepes-api-dev.radix.equinor.com/
        with:
          start: npm start
          wait-on: 'http://localhost:3000'
          config-file: cypress_chromium.dev.json
          spec: |
            cypress/integration/quickRunningTests/**/*
          

      # - name: Run quick running cypress tests
      #   env:
      #     token: ${{ steps.token.outputs.cypressAccesstokenDev }}
      #   run: npx cypress run --config-file "cypress_chromium.dev.json" --spec "cypress/integration/quickRunningTests/**/*" --env cyAccessToken=$token

      - name: Run long running cypress tests  
        env:
          token: ${{ steps.token.outputs.cypressAccesstokenDev }}
        run: npx cypress run --config-file "cypress_chromium.dev.json" --spec "cypress/integration/longRunningTests/**/*" --env cyAccessToken=$token
        if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'Run all tests') }}
        
      # - name: Run all tests in Chromium browser
      #   env:
      #     token: ${{ steps.token.outputs.cypressAccesstokenDev }}
      #   run: npx cypress run --browser chromium --config-file "cypress_chromium.dev.json" --env cyAccessToken=$token
      #   if: ${{ github.event_name != 'pull_request' }}
        
      # - name: Run all tests in Firefox browser  
      #   env:
      #     token: ${{ steps.token.outputs.cypressAccesstokenDev }}
      #   run: npx cypress run --browser firefox --config-file "cypress.dev.json" --env cyAccessToken=$token
      #   if: ${{ github.event_name != 'pull_request' }}

      - name: Save screenshots if failure
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      - name: Save videos if failure
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

      - run: npx nyc report --reporter lcov --reporter text --report-dir coverage

      - uses: actions/upload-artifact@v2
        with:
          name: Coverage-report
          path: coverage/lcov-report/

      - run: npx nyc report --reporter=text-summary > cypress_test_summary.txt
        if: ${{ github.event_name == 'pull_request' }}

      - run: sed '2d' cypress_test_summary.txt > cypress_test_summary2.txt
        if: ${{ github.event_name == 'pull_request' }}

      - run: sed '1 a Cypress Test Result' cypress_test_summary2.txt > cypress_test_summary3.txt
        if: ${{ github.event_name == 'pull_request' }}

      - name: comment PR
        uses: machine-learning-apps/pr-comment@master
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          path: cypress_test_summary3.txt


      - run: npx nyc report --reporter json  --report-dir coverage
      - name: Create coverage report
        run: npm test -- --coverage --watchAll=false --coverageDirectory=jest-coverage
        continue-on-error: true
      - run: npx istanbul-merge --out coverage2.json ./jest-coverage/coverage-final.json ./coverage/coverage-final.json

      - run: npx istanbul report --include coverage2.json --dir totalCoverage html

      - uses: actions/upload-artifact@v2
        with:
          name: Total coverage report
          path: totalCoverage
