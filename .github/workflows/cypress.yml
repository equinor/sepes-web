name: Cypress Test

on:
  pull_request:
  workflow_dispatch:
  # schedule:
    # * is a special character in YAML so you have to quote this string
  # - cron:  '0 4 * * 1,2,3,4,5'

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_DEV_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.AZURE_KEYVAULT_DEV_NAME }}
          secrets: 'MockUserNonProdWeb, AzureAdClientIdScope'  # comma separated list of secret keys that need to be fetched from the Key Vault 
        id: keyVaultSecrets

      - name: build
        working-directory: GetAccessToken
        run: dotnet build --configuration Release

      - name: Put access token in key vault
        env:
          buildConfiguration: 'Release'
          mockuserAppId: ${{ secrets.MOCK_USER_DEV_CLIENT_SECRET }}
          mockappuserClientSecret: ${{ steps.keyVaultSecrets.outputs.MockUserNonProdWeb }}
          mockUserAppScopes: ${{ steps.keyVaultSecrets.outputs.AzureAdClientIdScope}}
          keyVaultUserClientId: ${{ secrets.AZURE_KEYVAULT_DEV_NAME }}
          keyVaultName: ${{ secrets.AZURE_KEYVAULT_DEV_NAME }}
          cypressAccesstokenSecretname: 'cypressAccesstokenDev'
          NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget
          NPM_PACKAGES: $(Pipeline.Workspace)/.npm
          CYPRESS_BINARY: $(Pipeline.Workspace)/.cypressbinary
          clientId: ${{ secrets.DEV_AZURE_CREDENTIALS_CLIENT_ID }}
          clientSecret:  ${{ secrets.DEV_AZURE_CREDENTIALS_CLIENT_SECRET }}
          tenantId: ${{ secrets.AZURE_TENANT_ID }}
          azureSubscriptionId: ${{ secrets.DEV_AZURE_SUBSCRIPTION_ID }}
        run: |
          dotnet GetAccessToken/bin/Release/netcoreapp3.1/GetAccessToken.dll --tenant-id $tenantId --app-id $mockuserAppId --mock-user-client-secret $mockappuserClientSecret --authority $mockUserAppScopes --key-vault-name $keyVaultName --key-vault-secret-name $cypressAccesstokenSecretname --key-vault-user-client-secret $clientSecret --key-vault-user-client-id $clientId

      - uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.AZURE_KEYVAULT_DEV_NAME }}
          secrets: 'cypressAccesstokenDev'  # comma separated list of secret keys that need to be fetched from the Key Vault
        id: token

      # Install Node dependencies --spec "cypress/integration/test/test.spec.js"

      - run: npm install --save-dev mocha mochawesome mochawesome-merge mochawesome-report-generator

      - name: Run quick running cypress tests
        env:
          token: ${{ steps.token.outputs.cypressAccesstokenDev }}
        run: npx cypress run --config-file "cypress_chromium.dev.json" --spec "cypress/integration/quickRunningTests/**/*" --env cyAccessToken=$token
        if: contains(github.event.pull_request.labels.*.name, 'Do not run tests') == false 

      - name: Run long running cypress tests  
        env:
          token: ${{ steps.token.outputs.cypressAccesstokenDev }}
        run: npx cypress run --config-file "cypress_chromium.dev.json" --spec "cypress/integration/longRunningTests/**/*" --env cyAccessToken=$token
        if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'Run all tests') }}
        
      # - name: Run all tests in Chromium browser  
      #   env:
      #     token: ${{ steps.token.outputs.cypressAccesstokenDev }}
      #   run: npx cypress run --browser chromium --config-file "cypress_chromium.dev.json" --env cyAccessToken=$token
      #   if: ${{ github.event_name != 'pull_request' }}
        
      - name: Run all tests in Firefox browser  
        env:
          token: ${{ steps.token.outputs.cypressAccesstokenDev }}
        run: npx cypress run --browser firefox --config-file "cypress.dev.json" --env cyAccessToken=$token
        if: ${{ github.event_name != 'pull_request' }}

      - name: Save screenshots if failure
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      - run: npx nyc report --reporter lcov --reporter text --report-dir coverage

      - uses: actions/upload-artifact@v2
        with:
          name: Coverage-report
          path: coverage/lcov-report/

      - run: npx nyc report --reporter=text-summary > cypress_test_summary.txt
        if: ${{ github.event_name == 'pull_request' }}

      - run: sed '2d' cypress_test_summary.txt > cypress_test_summary2.txt
        if: ${{ github.event_name == 'pull_request' }}

      - run: sed '1 a Cypress Test Result' cypress_test_summary2.txt > cypress_test_summary3.txt
        if: ${{ github.event_name == 'pull_request' }}

      - name: comment PR
        uses: machine-learning-apps/pr-comment@master
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          path: cypress_test_summary3.txt


      - run: npx nyc report --reporter json  --report-dir coverage
      - name: Create coverage report
        run: npm test -- --coverage --watchAll=false --coverageDirectory=jest-coverage
        continue-on-error: true
      - run: npx istanbul-merge --out coverage2.json ./jest-coverage/coverage-final.json ./coverage/coverage-final.json

      - run: npx istanbul report --include coverage2.json --dir totalCoverage html

      - uses: actions/upload-artifact@v2
        with:
          name: Total coverage report
          path: totalCoverage
